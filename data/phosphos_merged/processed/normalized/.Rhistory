# ****************** normalise all files
taulaPatients=list()
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
filenames
i=1
fileName=paste(head(strsplit(filenames[i],"\\_")[[1]],n=1),".csv",sep="") #take only filename
fileName
fileName=head(strsplit(filenames[i],"\\_")[[1]],n=1) # remove "csv"
fileName
strsplit(filenames[i],"\\.")
unlist(strsplit(filenames[i],"\\."))
unlist(strsplit(filenames[i],"\\."))[1]
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
#taulaPatients[[i]]=normaliseSimp(taula)
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
taulaPatients[[1]]
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
taulaPatients=list()
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
#taulaPatients[[i]]=normaliseSimp(taula)
taulaPatients[[i]]=taula
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
filenames
taulaPatients
length(taulaPatients)
taulaPatients[[1]]
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
# ****************** load only DVs for all normalised files
taulaPatients=list()
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
#taulaPatients[[i]]=normaliseSimp(taula)
taula2=taula[,grep('DV',colnames(taula))]
taulaPatients[[i]]=taula2
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
# ****************** load only DVs for all normalised files
taulaPatients=list()
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
# create a subset of the matrix containing only the DV values
taula2=taula[,grep('DV',colnames(taula))]
# rename columns for improved plotting by removing "DV"
for (i in 1:length(names(taula2))){
colnames(taula2)[i]=strsplit(names(taula2[i]),"\\:")[[1]][2]
}
taulaPatients[[i]]=taula2
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
taulaPatients
taulaPatients[[1]]
taulaPatients
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
filenames
# ****************** load only DVs for all normalised files
taulaPatients=list()
taulaPatients=list()
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
# create a subset of the matrix containing only the DV values
taula2=taula[,grep('DV',colnames(taula))]
taulaPatients[[i]]=taula2
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
filenames
taulaPatients
strsplit(names(taula2[i]),"\\:")[[1]][2]
strsplit(names(taula2[i]),"\\:")
i
i+1
i=1
strsplit(names(taula2[i]),"\\:")
strsplit(names(taula2[i]),"\\:")[[1]][2]
taula2
for (i in 1:length(names(taula2))){
colnames(taula2)[i]=strsplit(names(taula2[i]),"\\:")[[1]][2]
}
taula2
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
# ****************** load only DVs for all normalised files
taulaPatients=list()
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
# create a subset of the matrix containing only the DV values
taula2=taula[,grep('DV',colnames(taula))]
# rename columns for improved plotting by removing "DV"
for (i in 1:length(names(taula2))){
colnames(taula2)[i]=strsplit(names(taula2[i]),"\\:")[[1]][2]
}
taulaPatients[[i]]=taula2
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
taulaPatients[[1]]
filenames
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
# ****************** load only DVs for all normalised files
taulaPatients=list()
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
# create a subset of the matrix containing only the DV values
taula2=taula[,grep('DV',colnames(taula))]
# rename columns for improved plotting by removing "DV"
for (j in 1:length(names(taula2))){
colnames(taula2)[j]=strsplit(names(taula2[j]),"\\:")[[1]][2]
}
taulaPatients[[i]]=taula2
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
taulaPatients[[1]]$HSPB1
dataPerPatient=length(taulaPatients[[1]])*length(taulaPatients[[1]]$HSPB1)
meltPatients=melt(taulaPatients)
names(meltPatients)=c('protein','logFC','patient')
meltPatients$patient=rep(filenames,each=dataPerPatient)
head(meltPatients)
#subSetPat = meltPatients[which(meltPatients$patient == 'CH003' | meltPatients$patient == 'CH004'),]
ggplot(meltPatients, aes(logFC, fill=patient)) +
geom_density(alpha=0.5) +
#geom_bar(position='dodge') +
facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
head(meltPatients)
head(meltPatients,n=100)
subSetPat = meltPatients[which(meltPatients$patient == 'CH003' | meltPatients$patient == 'CH004'),]
ggplot(subSetPat, aes(logFC, fill=patient)) +
geom_density(alpha=0.5) +
#geom_bar(position='dodge') +
facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
subSetPat = meltPatients[which(meltPatients$patient == 'CH003',]
subSetPat = meltPatients[which(meltPatients$patient == 'CH003'),]
ggplot(subSetPat, aes(logFC, fill=patient)) +
geom_density(alpha=0.5) +
#geom_bar(position='dodge') +
facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
ggplot(subSetPat, aes(logFC, fill=patient)) +
#geom_density(alpha=0.5) +
geom_bar(position='dodge') +
facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
ggplot(meltPatients, aes(logFC, fill=patient)) +
#geom_density(alpha=0.5) +
geom_bar(position='dodge') +
facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
numPatients=length(taulaPatients)
numProteins=length(taulaPatients[[1]])
numPatients
numProteins
which(meltPatients$logFC<0)
which(meltPatients$logFC>0)
which(meltPatients$logFC<0)
pvalue_greater=matrix(nrow=numPatients,ncol=numProteins)
colnames(pvalue_greater)=names(taulaPatients[[1]])
rownames(pvalue_greater)=filenames
# matrix for the negative FC test
pvalue_less=matrix(nrow=numPatients,ncol=numProteins)
colnames(pvalue_less)=names(taulaPatients[[1]])
rownames(pvalue_less)=filenames
# to the right?  (i.e. for that prot, if significant the patient has a signfivantly positive fold change)
for (i in 1:numPatients){
for (j in 1:numProteins){
pvalue_greater[i,j]=t.test(taulaPatients[[i]][j],mu=0,alternative="greater")$p.value
}
}
i=1
j=1
taulaPatients[[i]][j]
pvalue_greater[i,j]=t.test(taulaPatients[[i]][j],mu=0,alternative="greater")$p.value
pvalue_greater
pvalue_greater[1,1]
pvalue_greater[1,1]:10
pvalue_greater[1,1]<0.05
which(meltPatients<0.05)
which(meltPatients$logFC<0.05)
load("/Users/marti/Documents/R/combiMS/cluster/1_IB015.RData")
network$patientName
network$Opt$bScore
plotFit(network$Opt)
which(meltPatients$logFC<0.05)
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",pattern="*.csv",full.names=FALSE)
# ****************** load only DVs for all normalised files
taulaPatients=list()
for (i in 1:length(filenames)){
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/normalized/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
# create a subset of the matrix containing only the DV values
taula2=taula[,grep('DV',colnames(taula))]
# rename columns for improved plotting by removing "DV"
for (j in 1:length(names(taula2))){
colnames(taula2)[j]=strsplit(names(taula2[j]),"\\:")[[1]][2]
}
taulaPatients[[i]]=taula2
filenames[i]=unlist(strsplit(filenames[i],"\\."))[1] #take only filename
#taulaPatients[[i]]$patient=filenames[i]
}
filenames=list.files("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/",pattern="*.csv",full.names=FALSE)
filenames[1]
filenames[55]
fileName=filenames[55]
fileNA
fileName
taula=read.csv(paste("/Users/marti/Documents/ebi/combiMS/data/phosphosMergedAbsMax/processed/",fileName,sep=""),header=TRUE,dec=".",check.names=FALSE, stringsAsFactors=FALSE)
taula2=taula[,grep('DV',colnames(taula))]
# rename columns for improved plotting by removing "DV"
for (i in 1:length(names(taula2))){
colnames(taula2)[i]=strsplit(names(taula2[i]),"\\:")[[1]][2]
}
#************* step1: X= log2 (rawx)
taula2=log2(taula2)
#************* step2: compute Fold Change, since we have log2 we just substract
row1=taula2[1,]
for (i in 1:dim(taula2)[1]){
taula2[i,] = taula2[i,] - row1
}
#************* plot log-FC distribution
meltPatient=melt(taula2)
names(meltPatient)=c('protein','logFC')
ggplot(meltPatient, aes(logFC, colour=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
# ************ for each protein, find out which distribuitions are skewed, and to which side
# calculate t-test and keep pvalue. for each protein, a patient has a distribution
# prepare a matrix to hold the pvalue for each patient, that this protein is skewed to the right
numProt=length(colnames(taula2))
pvalueGreater=vector()
pvalueLess=vector()
# to the right?  (i.e. for that prot, if significant the patient has a signfivantly positive fold change)
for (i in 1:numProt){
pvalueGreater[i]=t.test(taula2[i],mu=0,alternative="greater")$p.value
}
positiveProt=which(pvalueGreater<0.05)
# to the left?  (i.e. for that prot, if significant the patient has a signfivantly negative fold change)
for (i in 1:numProt){
pvalueLess[i]=t.test(taula2[i],mu=0,alternative="less")$p.value
}
negativeProt=which(pvalueLess<0.05)
# proteins that fail both tests are not significantly pos or neg phosphorylated
for (i in 1:numProt){
noiseProt=intersect(which(pvalueGreater>0.05),which(pvalueLess>0.05))
}
nameProts=names(taula2)[noiseProt]
subsetNoise=meltPatient[which(meltPatient$protein %in% nameProts),]
ggplot(subsetNoise, aes(logFC, fill=protein)) +
#geom_density() +
geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
# plot proteins that are negatively significantly phosphorylated
nameProts=names(taula2)[negativeProt]
subsetNegative=meltPatient[which(meltPatient$protein %in% nameProts),]
ggplot(subsetNegative, aes(logFC, fill=protein)) +
#geom_density() +
geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
#************** step3: correct pos and neg distributions (non-significant still need to be corrected)
numExp=dim(taula2)[1]
if (length(positiveProt)>0){
for(i in 1:numExp){
for (j in 1:length(positiveProt)){
if (taula2[i,positiveProt[j]]>(-1) && taula2[i,positiveProt[j]]<0 && !is.na(taula2[i,positiveProt[j]])){
taula2[i,positiveProt[j]]=0
}
if(taula2[i,positiveProt[j]]<(-1) && !is.na(taula2[i,positiveProt[j]])){
taula2[i,positiveProt[j]]=NA
}
}
}
}
# in negative distributions: between 0 and 1, replace by 0. above 1 replace by NA.
# Last, turn remaining negatives into positives.
if (length(negativeProt)>0){
print("there's negative distributions")
for(i in 1:numExp){
for (j in 1:length(negativeProt)){
if (taula2[i,negativeProt[j]]>0 && taula2[i,negativeProt[j]]<1 && !is.na(taula2[i,negativeProt[j]])){
taula2[i,negativeProt[j]]=0
} else if(taula2[i,negativeProt[j]]>1 && !is.na(taula2[i,negativeProt[j]])){
taula2[i,negativeProt[j]]=NA
} else if (taula2[i,negativeProt[j]] && !is.na(taula2[i,negativeProt[j]])){
taula2[i,negativeProt[j]]=abs(taula2[i,negativeProt[j]])
}
}
}
}
# ************* step 4: correct non-significant distributions (not done before because it crashes normalization by 0)
if(length(noiseProt)>0){
for(i in 1:numExp){
for (j in 1:length(noiseProt)){
if(taula2[i,noiseProt[j]]>(-1) && taula2[i,noiseProt[j]]<1 && !is.na(taula2[i,noiseProt[j]])){
taula2[,noiseProt[j]]=0} else if ( (taula2[i,noiseProt[j]]<(-1) || taula2[i,noiseProt[j]]>1) && !is.na(taula2[i,positiveProt[j]])){
taula2[,noiseProt[j]]=NA
}
}
}
}
# ************* step 5: Hill function on FCz, we are using as EC50 the median of each signal
# taula2 = 1 / (1 + (EC50 / taula2)^HillCoef)
taula3=taula2
indexAllButNoise=setdiff(seq(1:ncol(taula2)), noiseProt)
taula3[,indexAllButNoise]=apply(taula2[,indexAllButNoise], 2, function(column){
1 / (1 + (median(column,na.rm=TRUE) / column) ^ HillCoef)
})
#EC50 <- colMedians(as.matri(taula2))
#taula2 = 1 / (1 + (EC50 / taula2)^HillCoef)
HillCoef=2
# ************* step 5: Hill function on FCz, we are using as EC50 the median of each signal
# taula2 = 1 / (1 + (EC50 / taula2)^HillCoef)
taula3=taula2
indexAllButNoise=setdiff(seq(1:ncol(taula2)), noiseProt)
taula3[,indexAllButNoise]=apply(taula2[,indexAllButNoise], 2, function(column){
1 / (1 + (median(column,na.rm=TRUE) / column) ^ HillCoef)
})
#EC50 <- colMedians(as.matri(taula2))
#taula2 = 1 / (1 + (EC50 / taula2)^HillCoef)
#   #************* step6: shift negatives
if (length(negativeProt)>0){
for (i in 1:length(negativeProt)){
taula3[,negativeProt[i]] = 1- abs(taula3[,negativeProt[i]])
}
}
#************* plot normalised distribution
normalizedPatient=melt(data.frame(taula3))
names(normalizedPatient)=c('protein','logFC')
ggplot(normalizedPatient, aes(logFC, fill=protein)) +
#geom_density() +
geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
normalizedPatient
normalizedPatient$protein[which(normalizedPatient$protein=='IKBA')]
normalizedPatient[which(normalizedPatient$protein=='IKBA')]
normalizedPatient[which(,normalizedPatient$protein=='IKBA')]
normalizedPatient[,which(normalizedPatient$protein=='IKBA')]
which(normalizedPatient$protein=='IKBA')
normalizedPatient[which(normalizedPatient$protein=='IKBA'),]
taula
taula2=taula[,grep('DV',colnames(taula))]
# rename columns for improved plotting by removing "DV"
for (i in 1:length(names(taula2))){
colnames(taula2)[i]=strsplit(names(taula2[i]),"\\:")[[1]][2]
}
#************* step1: X= log2 (rawx)
taula2=log2(taula2)
#************* step2: compute Fold Change, since we have log2 we just substract
row1=taula2[1,]
for (i in 1:dim(taula2)[1]){
taula2[i,] = taula2[i,] - row1
}
#************* plot log-FC distribution
meltPatient=melt(taula2)
names(meltPatient)=c('protein','logFC')
ggplot(meltPatient, aes(logFC, colour=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
numProt=length(colnames(taula2))
pvalueGreater=vector()
pvalueLess=vector()
# to the right?  (i.e. for that prot, if significant the patient has a signfivantly positive fold change)
for (i in 1:numProt){
pvalueGreater[i]=t.test(taula2[i],mu=0,alternative="greater")$p.value
}
positiveProt=which(pvalueGreater<0.05)
# to the left?  (i.e. for that prot, if significant the patient has a signfivantly negative fold change)
for (i in 1:numProt){
pvalueLess[i]=t.test(taula2[i],mu=0,alternative="less")$p.value
}
negativeProt=which(pvalueLess<0.05)
# proteins that fail both tests are not significantly pos or neg phosphorylated
for (i in 1:numProt){
noiseProt=intersect(which(pvalueGreater>0.05),which(pvalueLess>0.05))
}
nameProts=names(taula2)[noiseProt]
subsetNoise=meltPatient[which(meltPatient$protein %in% nameProts),]
ggplot(subsetNoise, aes(logFC, fill=protein)) +
#geom_density() +
geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
nameProts=names(taula2)[negativeProt]
subsetNegative=meltPatient[which(meltPatient$protein %in% nameProts),]
ggplot(subsetNegative, aes(logFC, fill=protein)) +
#geom_density() +
geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
numExp=dim(taula2)[1]
if (length(positiveProt)>0){
for(i in 1:numExp){
for (j in 1:length(positiveProt)){
if (taula2[i,positiveProt[j]]>(-1) && taula2[i,positiveProt[j]]<0 && !is.na(taula2[i,positiveProt[j]])){
taula2[i,positiveProt[j]]=0
}
if(taula2[i,positiveProt[j]]<(-1) && !is.na(taula2[i,positiveProt[j]])){
taula2[i,positiveProt[j]]=NA
}
}
}
}
# in negative distributions: between 0 and 1, replace by 0. above 1 replace by NA.
# Last, turn remaining negatives into positives.
if (length(negativeProt)>0){
print("there's negative distributions")
for(i in 1:numExp){
for (j in 1:length(negativeProt)){
if (taula2[i,negativeProt[j]]>0 && taula2[i,negativeProt[j]]<1 && !is.na(taula2[i,negativeProt[j]])){
taula2[i,negativeProt[j]]=0
} else if(taula2[i,negativeProt[j]]>1 && !is.na(taula2[i,negativeProt[j]])){
taula2[i,negativeProt[j]]=NA
} else if (taula2[i,negativeProt[j]] && !is.na(taula2[i,negativeProt[j]])){
taula2[i,negativeProt[j]]=abs(taula2[i,negativeProt[j]])
}
}
}
}
# ************* step 4: correct non-significant distributions (not done before because it crashes normalization by 0)
if(length(noiseProt)>0){
for(i in 1:numExp){
for (j in 1:length(noiseProt)){
if(taula2[i,noiseProt[j]]>(-1) && taula2[i,noiseProt[j]]<1 && !is.na(taula2[i,noiseProt[j]])){
taula2[,noiseProt[j]]=0} else if ( (taula2[i,noiseProt[j]]<(-1) || taula2[i,noiseProt[j]]>1) && !is.na(taula2[i,positiveProt[j]])){
taula2[,noiseProt[j]]=NA
}
}
}
}
# ************* step 5: Hill function on FCz, we are using as EC50 the median of each signal
# taula2 = 1 / (1 + (EC50 / taula2)^HillCoef)
taula3=taula2
indexAllButNoise=setdiff(seq(1:ncol(taula2)), noiseProt)
taula3[,indexAllButNoise]=apply(taula2[,indexAllButNoise], 2, function(column){
1 / (1 + (median(column,na.rm=TRUE) / column) ^ HillCoef)
})
#EC50 <- colMedians(as.matri(taula2))
#taula2 = 1 / (1 + (EC50 / taula2)^HillCoef)
#   #************* step6: shift negatives
if (length(negativeProt)>0){
for (i in 1:length(negativeProt)){
taula3[,negativeProt[i]] = 1- abs(taula3[,negativeProt[i]])
}
}
normalizedPatient=melt(data.frame(taula3))
names(normalizedPatient)=c('protein','logFC')
ggplot(normalizedPatient, aes(logFC, fill=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
load("/Users/marti/Documents/R/combiMS/cluster/10h/10h/1_CH003.RData")
network$patientName
network$Opt$bScore
sum(network$Opt$bString)
ggplot(subsetNoise, aes(logFC, fill=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
ggplot(subsetNoise, aes(logFC, colour=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
ggplot(subsetNegative, aes(logFC, colour=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()
ggplot(meltPatient, aes(logFC, colour=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()+ggtitle(1 patient, 21 experiments)
ggplot(meltPatient, aes(logFC, colour=protein)) +
geom_density() +
#geom_bar(position='dodge') +
# facet_grid(protein~., scales='free') +
geom_vline(xintercept=0, colour='grey') +
theme_bw()+ggtitle("1 patient, 21 experiments")
network$countNws
